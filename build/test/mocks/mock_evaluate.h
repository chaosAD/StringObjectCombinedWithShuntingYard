/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_EVALUATE_H
#define _MOCK_EVALUATE_H

#include "Evaluate.h"
#include "CException.h"

void mock_Evaluate_Init(void);
void mock_Evaluate_Destroy(void);
void mock_Evaluate_Verify(void);




#define evaluate_IgnoreAndReturn(cmock_retval) evaluate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void evaluate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define evaluate_ExpectAndReturn(expression, cmock_retval) evaluate_CMockExpectAndReturn(__LINE__, expression, cmock_retval)
void evaluate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* expression, int cmock_to_return);
typedef int (* CMOCK_evaluate_CALLBACK)(char* expression, int cmock_num_calls);
void evaluate_StubWithCallback(CMOCK_evaluate_CALLBACK Callback);
#define evaluate_ExpectAndThrow(expression, cmock_to_throw) evaluate_CMockExpectAndThrow(__LINE__, expression, cmock_to_throw)
void evaluate_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, char* expression, CEXCEPTION_T cmock_to_throw);
#define evaluatex_IgnoreAndReturn(cmock_retval) evaluatex_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void evaluatex_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define evaluatex_ExpectAndReturn(expression, cmock_retval) evaluatex_CMockExpectAndReturn(__LINE__, expression, cmock_retval)
void evaluatex_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* expression, int cmock_to_return);
typedef int (* CMOCK_evaluatex_CALLBACK)(char* expression, int cmock_num_calls);
void evaluatex_StubWithCallback(CMOCK_evaluatex_CALLBACK Callback);
#define evaluatex_ExpectAndThrow(expression, cmock_to_throw) evaluatex_CMockExpectAndThrow(__LINE__, expression, cmock_to_throw)
void evaluatex_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, char* expression, CEXCEPTION_T cmock_to_throw);

#endif
